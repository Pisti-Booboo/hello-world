### These settings are synced to GitHub by https://probot.github.io/apps/settings/
### read how to config: https://github.com/probot/settings/blob/master/README.md
### And see https://developer.github.com/v3/repos/#edit for all available settings.

repository:
   
   ## The name of the repository. Changing this will rename the repository
   #name: repo-name
   
   ## A short description of the repository that will show up on GitHub
   #description: This is the description of this github repository.
   
   ## A comma-separated list of topics to set on the repository
   #topics: game,app,art,concept,futur,client,server,network,linux,video,editor,production,engineering,cad,3d
   
   ## A URL with more information about the repository
   #homepage: https://example.github.io/
   

   ## `true` to make the repository private or `false` to make it public.
   #private: false

   ## the default branch for this repository.
   default_branch: master

   ## if true squash all the commits in pull requests for finaly merge only one commit on head of the branch .
   allow_squash_merge: false
   ## allow or not to create a new branch for merging commits in the pull request on the head of the branch.
   allow_merge_commit: false
   ## rebase-merging keep all the commits of the pull requests and add them on the branch head.
   allow_rebase_merge: true
   

   ### Features
   
   ## `true` to integrate the 'task tracking' or `false` to disable it.
   has_issues: true

   ## `true` for enable or `false` to disable the 'projects board'.
   ## (If projects are disabled for the organization, passing `true` will cause an API error.)
   has_projects: false
   ## All of This for Only That... is my thinking when i see the utility of the 'projects board'.
   ## Maybe with required approving review on a pull request 'projects board' will appear more usefull.
   ## for now lets just use milestones and personal 'projects boards'

   ## `true` to enable the wiki or `false` to disable it.
   has_wiki: false
   ## i dont want spend contributions efforts in gh-page AND wiki documentation.
   ## i prefere we focus on just one type of documentation.
   ## gh-page seems easier to integrate in realases for offline documentation and keep the same collaboration process
   ## but GitHub Pages are always public, even if the repo theyâ€™re coming form is private. 

   ## Set to true or false to enable/disable the !deprecated! downloads features on the repository..
   #has_downloads: false


   
## define Labels for Issues and Pull Requests
## name: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
## description: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
labels:
   
 - name: fabala
   color: ccccff
   description: concerne test.


## define milestones for Issues and Pull Requests
milestones:
 - title: beta-release
   description: required task for the next release
   ## state of the milestone can be `open` or `close`
   state: open


## give specific users access to this repository.
#collaborators:
#    ## Note: Only valid on organization-owned repositories.
#    ## The permission to grant the collaborator. Can be one of:
#    ## * `pull` - can pull, but not push to or administer this repository.
#    ## * `push` - can pull and push, but not administer this repository.
#    ## * `admin` - can pull,push and administer this repository.
#  - username: hubot
#    permission: pull

## NOTE: The APIs needed for teams are not supported yet by GitHub Apps
## https://developer.github.com/v3/apps/available-endpoints/
#teams:
#  - name: core
#    permission: admin
   
#  - name: docs
#    permission: push

## branches
#branches:
#  - name: master
#    ## https://developer.github.com/v3/repos/branches/#update-branch-protection
#    ## Branch Protection settings. Set to null to disable
#    protection:
#      ## Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
#      ## cannot have review approval on my own pull requests, so cannot use it if im working alone. 
#      ## or this restriction can be pass by unable the option:'admin also' 
#      ## in this case all owner/contributors can force any pull request approval without any review.
#      ## so, for make pull request aproval by review avalable, need at least 2 contributors.
#      required_pull_request_reviews:
#        ## The number of approvals required. (1-6)
#        required_approving_review_count: 1
#        ## Dismiss approved reviews automatically when a new commit is pushed.
#        dismiss_stale_reviews: true
#        ## Blocks merge until code owners have reviewed.
#        require_code_owner_reviews: true
#        ## Specify which users and teams can dismiss pull request reviews.
#        ## Pass an empty dismissal_restrictions object to disable.
#        ## User and team dismissal_restrictions are only available for organization-owned repositories. 
##       ## Omit this parameter for personal repositories.
#        dismissal_restrictions:
#          users: []
#          teams: []
#      ## Required. Require status checks to pass before merging. Set to null to disable
#      required_status_checks:
#        ## Required. Require branches to be up to date before merging.
#        strict: true
#        ## Required. The list of status checks to require in order to merge into this branch
#        contexts: []
#      ## Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
#      enforce_admins: true
#      ## Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
#      restrictions:
#        users: []
#        teams: []

